#!/bin/bash
# a6ab94e0c094daf2023788808e42ed9bf3d6df90d779c50dcde75d36fc0873ce
# encoded with bash64 - https://github.com/KamaranL/bash64
MAIN='IyEvdXNyL2Jpbi9lbnYgYmFzaAoKKCgke0JBU0hfVkVSU0lPTjo6MX0gPCA0KSkgJiYgewogICAgZWNobyAtZSAiXDAzM1sxbUVSUk9SXDAzM1swbVx0JHtfX01BSU5fXyMjKlwvfSByZXF1aXJlcyBiYXNoID49NC54IgogICAgZXhpdCAxCn0KCmZ1bmN0aW9uIHA6CnsgIyBwcmludAogICAgKCghJCMpKSAmJiByZXR1cm4gMQoKICAgIHA6OmEoKQogICAgeyAjIGFycmF5CiAgICAgICAgbG9jYWwgawogICAgICAgIGxvY2FsIC1uIGFycmF5PSIkMSIKCiAgICAgICAgcmVzKz0iJHByZSQxPShcbiIKICAgICAgICBmb3IgayBpbiAiJHshYXJyYXlbQF19IjsgZG8KICAgICAgICAgICAgcmVzKz0iJCgKICAgICAgICAgICAgICAgIHByaW50ZiAiJS4wcyAiIHsxLi40fSAmJgogICAgICAgICAgICAgICAgICAgIHByaW50ZiAiJHtrfT0ke2FycmF5WyRrXX0lcyIgIlxuIgogICAgICAgICAgICApIgogICAgICAgIGRvbmUKICAgICAgICByZXMrPSIkcHJlKVxuIgoKICAgICAgICByZXR1cm4gMAogICAgfQoKICAgIHA6Omt2cCgpCiAgICB7ICMga2V5LXZhbHVlIHBhaXIKICAgICAgICBsb2NhbCAtQSBhcmcKICAgICAgICBsb2NhbCAtYSBwb3MKICAgICAgICBsb2NhbCByZXMKCiAgICAgICAgd2hpbGUgKCgkIykpOyBkbwogICAgICAgICAgICBjYXNlICIkMSIgaW4KICAgICAgICAgICAgLWQpICMgZGVsaW1pdGVyCiAgICAgICAgICAgICAgICBbICEgLXogIiQyIiBdICYmCiAgICAgICAgICAgICAgICAgICAgYXJnW2RdPSIkMiIgJiYgc2hpZnQKICAgICAgICAgICAgICAgIDs7CiAgICAgICAgICAgIC1rKSAjIGtleQogICAgICAgICAgICAgICAgYXJnW2tdPXRydWUKICAgICAgICAgICAgICAgIDs7CiAgICAgICAgICAgIC12KSAjIHZhbHVlCiAgICAgICAgICAgICAgICBhcmdbdl09dHJ1ZQogICAgICAgICAgICAgICAgOzsKICAgICAgICAgICAgKikgIyBwb3NpdGlvbmFscwogICAgICAgICAgICAgICAgcG9zKz0oIiQxIikKICAgICAgICAgICAgICAgIDs7CiAgICAgICAgICAgIGVzYWMKICAgICAgICAgICAgc2hpZnQKICAgICAgICBkb25lCiAgICAgICAgKCghJHsjcG9zW0BdfSkpICYmIHJldHVybiAxCgogICAgICAgIFsgLXogIiR7YXJnW2RdfSIgXSAmJiBhcmdbZF09JyAnCiAgICAgICAgSUZTPSIke2FyZ1tkXX0iCiAgICAgICAgcmVhZCAtcmEgcmVzIDw8PCIke3Bvc1tAXX0iCiAgICAgICAgdW5zZXQgSUZTCgogICAgICAgIGlmIFsgIiR7YXJnW2tdfSIgPT0gdHJ1ZSBdOyB0aGVuCiAgICAgICAgICAgIFsgLXogIiR7cmVzWzBdfSIgXSAmJiByZXR1cm4gMQogICAgICAgICAgICBlY2hvIC1lICIke3Jlc1swXX0iICYmIHJldHVybiAwCiAgICAgICAgZWxpZiBbICIke2FyZ1t2XX0iID09IHRydWUgXTsgdGhlbgogICAgICAgICAgICBbIC16ICIke3Jlc1sxXX0iIF0gJiYgcmV0dXJuIDEKICAgICAgICAgICAgZWNobyAtZSAiJHtyZXNbMV19IiAmJiByZXR1cm4gMAogICAgICAgIGZpCiAgICB9CgogICAgbG9jYWwgLUEgYXJnCiAgICBsb2NhbCAtYSBwb3MKICAgIGxvY2FsIHJlcyBwcmUKCiAgICB3aGlsZSAoKCQjKSk7IGRvCiAgICAgICAgY2FzZSAiJDEiIGluCiAgICAgICAgLWEpICMgYXJyYXkKICAgICAgICAgICAgYXJnW2FdPXRydWUKICAgICAgICAgICAgOzsKICAgICAgICAtZSkgIyBlcnJvcgogICAgICAgICAgICBhcmdbZV09dHJ1ZQogICAgICAgICAgICA7OwogICAgICAgIC0tZm4pICMgZnVuY3Rpb24gbmFtZSBmb3JtYXQKICAgICAgICAgICAgWyAteiAiJDIiIF0gJiYgcmV0dXJuIDEKICAgICAgICAgICAgcmVzPSIkezIvL1wgLy19IiAmJiByZXM9IiR7cmVzLy9cLy8ufSIKICAgICAgICAgICAgZWNobyAtZSAiJHtyZXMsLH0iICYmIHJldHVybiAwCiAgICAgICAgICAgIDs7CiAgICAgICAgLWsgfCAtdikgIyBrZXkgfCB2YWx1ZQogICAgICAgICAgICBwOjprdnAgIiRAIgogICAgICAgICAgICByZXR1cm4gJD8KICAgICAgICAgICAgOzsKICAgICAgICAtdykgIyB3YXJuCiAgICAgICAgICAgIGFyZ1t3XT10cnVlCiAgICAgICAgICAgIDs7CiAgICAgICAgLXgpICMgdmVyYm9zZS90ZXN0CiAgICAgICAgICAgIGFyZ1t4XT10cnVlCiAgICAgICAgICAgIDs7CiAgICAgICAgKikgIyBwb3NpdGlvbmFscwogICAgICAgICAgICBwb3MrPSgiJDEiKQogICAgICAgICAgICA7OwogICAgICAgIGVzYWMKICAgICAgICBzaGlmdAogICAgZG9uZQogICAgKCghJHsjcG9zW0BdfSkpICYmIHJldHVybiAxCgogICAgWyAiJHthcmdbeF19IiA9PSB0cnVlIF0gJiYgewogICAgICAgIFsgIiR7YVt4XX0iID09IHRydWUgXSAmJiB7CiAgICAgICAgICAgIHByZT0iIyMjICIKICAgICAgICB9IHx8IHJldHVybiAwCiAgICB9CgogICAgWyAiJHthcmdbYV19IiA9PSB0cnVlIF0gJiYgewogICAgICAgIGZvciBhcnIgaW4gIiR7cG9zW0BdfSI7IGRvCiAgICAgICAgICAgIHA6OmEgIiRhcnIiCiAgICAgICAgZG9uZQogICAgICAgIGVjaG8gLWUgIiRyZXMiICYmIHJldHVybiAwCiAgICB9IHx8IHJlcz0iJHtwb3NbKl19IgoKICAgIGlmIFsgIiR7YXJnW3ddfSIgPT0gdHJ1ZSBdOyB0aGVuCiAgICAgICAgcHJlPSJcMDMzWzFtV0FSTlwwMzNbMG1cdCIKICAgIGVsaWYgWyAiJHthcmdbZV19IiA9PSB0cnVlIF07IHRoZW4KICAgICAgICBwcmU9IlwwMzNbMW1FUlJPUlwwMzNbMG1cdCIKICAgIGZpCgogICAgZWNobyAtZSAiJHByZSRyZXMiCiAgICByZXR1cm4gMAp9CgpmdW5jdGlvbiAudHJhY2UKeyAjcHJpbnQgKHZvaWQtb25seSkgY2FsbGVyIGZ1bmN0aW9uCiAgICBbICIke2FbeHhdfSIgIT0gdHJ1ZSBdICYmIHJldHVybiAxCiAgICBwOiAteCBpbnZva2luZyAiJHtGVU5DTkFNRVsxXX0oJCopIiAmJiByZXR1cm4gMAp9CgpmdW5jdGlvbiAuZGllCnsgI3ByaW50ICYmIGV4aXQKICAgIGxvY2FsIC1hIHBvcwogICAgbG9jYWwgcmVzIGVycgoKICAgIHdoaWxlICgoJCMpKTsgZG8KICAgICAgICBjYXNlICIkMSIgaW4KICAgICAgICAtZSkgIyBlcnJvcgogICAgICAgICAgICBlcnI9InRydWUiCiAgICAgICAgICAgIDs7CiAgICAgICAgKikKICAgICAgICAgICAgcG9zKz0oIiQxIikKICAgICAgICAgICAgOzsKICAgICAgICBlc2FjCiAgICAgICAgc2hpZnQKICAgIGRvbmUKCiAgICByZXM9IiR7cG9zWypdfSIKCiAgICBbICIkZXJyIiA9PSB0cnVlIF0gJiYgewogICAgICAgIHA6IC1lICIkcmVzIiAmJiBleGl0IDEKICAgIH0gfHwgZWNobyAtZSAiJHJlcyIgJiYgZXhpdCAxCn0KCmZ1bmN0aW9uIG1haW46OmNoZWNrLWRlcGVuZGVuY2llcwp7CiAgICAudHJhY2UgIiRAIgoKICAgIGxvY2FsIGRlcHMgYmluCgogICAgZGVwcz0oCiAgICAgICAgYmFzaAogICAgICAgIGNhdAogICAgICAgIGRhdGUKICAgICAgICBkaXJuYW1lCiAgICAgICAgZ3JlcAogICAgICAgIG1rZGlyCiAgICAgICAgcmVhbHBhdGgKICAgICAgICBzZWQKICAgICAgICBzaGEyNTZzdW0KICAgICkKCiAgICBmb3IgYmluIGluICIke2RlcHNbQF19IjsgZG8KICAgICAgICBwOiAteCBjaGVja2luZyBkZXBlbmRlbmN5OiAkYmluCiAgICAgICAgISBjb21tYW5kIC12ICRiaW4gJj4vZGV2L251bGwgJiYKICAgICAgICAgICAgLmRpZSAtZSAkYmluIG5vdCBmb3VuZCBcCiAgICAgICAgICAgICAgICAnXG4gICctIHBsZWFzZSBpbnN0YWxsIGJlZm9yZSBwcm9jZWVkaW5nCiAgICBkb25lCgogICAgcmV0dXJuIDAKfQoKZnVuY3Rpb24gbWFpbjo6bG9hZC1jb25maWcKewogICAgIyBAYXJnICAgICAgPGNvbmZpZ19maWxlPgoKICAgIC50cmFjZSAiJEAiCgogICAgWyAhIC1yICIkMSIgLW8gLWQgIiQxIiBdICYmIHsKICAgICAgICBwOiAtdyBjYW5ub3QgcmVhZCBjb25maWcgZmlsZTogIiQxIgogICAgICAgIHJldHVybiAxCiAgICB9CgogICAgbG9jYWwgLWEgdmFsaWRfa2V5cyBsaW5lcwogICAgbG9jYWwgLWwgdl9rZXkgY19rZXkgawogICAgbG9jYWwgbGluZSB2CgogICAgbGluZXM9KCQoZ3JlcCAnXlteI10nICIkMSIpKQogICAgdmFsaWRfa2V5cz0oCiAgICAgICAgYi5zcmMKICAgICAgICBiLm5hbWUKICAgICAgICBiLm91dAogICAgICAgIGIubmFtZQogICAgICAgIHMudmVyc2lvbgogICAgICAgIHMubGlib25seQogICAgICAgIHMuZXJyX25vYXJncwogICAgICAgIHMuZXJyX2lsbGVnYWxvcHQKICAgICkKCiAgICBmb3Igdl9rZXkgaW4gIiR7dmFsaWRfa2V5c1tAXX0iOyBkbwogICAgICAgIGNfa2V5PSIke3Zfa2V5JS4qfVske3Zfa2V5IyoufV0iCiAgICAgICAgdj0KICAgICAgICBmb3IgbGluZSBpbiAiJHtsaW5lc1tAXX0iOyBkbwogICAgICAgICAgICBrPSIkKHA6IC1rICIkbGluZSIgLWQgPSkiCgogICAgICAgICAgICBbICIkdl9rZXkiID09ICIkayIgXSAmJiB7CiAgICAgICAgICAgICAgICB2PSIkKHA6IC12ICIkbGluZSIgLWQgPSkiCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICB9CiAgICAgICAgZG9uZQoKICAgICAgICBbIC16ICIkdiIgXSAmJiB7CiAgICAgICAgICAgIFsgISAteiAiJHtjWyRjX2tleV19IiBdICYmCiAgICAgICAgICAgICAgICBwOiAteCAiJyR2X2tleSciIG5vdCBmb3VuZCwgdXNpbmcgZGVmYXVsdDogIiR7Y1skY19rZXldfSIKICAgICAgICAgICAgY29udGludWUKICAgICAgICB9CgogICAgICAgIENPTkZJR1skY19rZXldPSIkdiIKICAgIGRvbmUKCiAgICByZXR1cm4gMAp9CgpmdW5jdGlvbiBtYWluOjpwYXJzZS1hcmdzCnsKICAgIC50cmFjZSAiJEAiCgogICAgbG9jYWwgLWwga2V5IG9fa2V5CgogICAgZm9yIGtleSBpbiAiJHshY1tAXX0iOyBkbwogICAgICAgIF9fPSIke2tleS8vXFsvLn0iCiAgICAgICAgb19rZXk9IiR7X18vL1xdL30iCgogICAgICAgIFsgISAteiAiJHtvWyRvX2tleV19IiBdICYmIHsKICAgICAgICAgICAgcDogLXggb3B0aW9uIHByb3ZpZGVkIC0gb3ZlcnJpZGluZyAiJHtjWyRrZXldfSA9PiAke29bJG9fa2V5XX0iCiAgICAgICAgICAgIENPTkZJR1ska2V5XT0iJHtvWyRvX2tleV19IgogICAgICAgIH0KICAgICAgICBbICEgLXogIiR7YVska2V5XX0iIF0gJiYgewogICAgICAgICAgICBwOiAteCBhcmcgcHJvdmlkZWQgLSBvdmVycmlkaW5nICIke2NbJGtleV19ID0+ICR7YVska2V5XX0iCiAgICAgICAgICAgIENPTkZJR1ska2V5XT0iJHthWyRrZXldfSIKICAgICAgICB9CiAgICBkb25lCiAgICB1bnNldCBfXwoKICAgIHJldHVybiAwCn0KCmZ1bmN0aW9uIG1haW46OnNjYW4tc291cmNlCnsKICAgICMgQGFyZyAgICAgIDxzcmNfZGlyPgoKICAgIC50cmFjZSAiJEAiCgogICAgWyAtZCAiJDEiIF0gfHwgWyAtciAiJDEiIF0gfHwgLmRpZSAtZSBjYW5ub3QgYWNjZXNzIHNvdXJjZSBkaXJlY3Rvcnk6ICIkMSIKCiAgICBzY2FuLXNvdXJjZTo6bWFrZS1oZWxwZG9jKCkKICAgIHsKICAgICAgICAjIEBhcmcgICAgICA8c3JjX2ZpbGU+CgogICAgICAgIC50cmFjZSAiJEAiCgogICAgICAgIGxvY2FsIGxpbmUgZGVzYyBwYXJhbSBhcmcgdXNhZ2UKCiAgICAgICAgZGVzYz0oJChzZWQgLW4gLWUgJy9eIyAqQGRlc2MgKi8ge3MvIyAqQGRlc2MgKi8vOyBwO30nICIkMSIpKQogICAgICAgICgoJHsjZGVzY1tAXX0pKSAmJgogICAgICAgICAgICBIRUxQTUFQWyRmbl09IiR7ZGVzY1sqXX0iIHx8CiAgICAgICAgICAgIEhFTFBNQVBbJGZuXT0iLSIKCiAgICAgICAgd2hpbGUgSUZTPSByZWFkIC1yYSBsaW5lOyBkbwogICAgICAgICAgICBfXz0iJChwOiAtayAiJGxpbmUiIC1kID0pIiAmJgogICAgICAgICAgICAgICAgcGFyYW0rPSIkKHByaW50ZiAiICAlLTIwcyVzIiBcCiAgICAgICAgICAgICAgICAgICAgIiR7X18vL1wkL1xcXCR9IiAiJChwOiAtdiAiJGxpbmUiIC1kID0pXG4iKSIKICAgICAgICBkb25lIDw8PCIkKHNlZCAtbiAtZSAnL14jICpAcGFyYW0gKi8ge3MvIyAqQHBhcmFtICovLzsgcDt9JyAiJDEiKSIKICAgICAgICB1bnNldCBfXwoKICAgICAgICBbICIke2Nbc1tsaWJvbmx5XV19IiAhPSB0cnVlIF0gJiYKICAgICAgICAgICAgdXNhZ2U9IlwkezAjIypcL30gIgoKICAgICAgICB1c2FnZSs9IiR7Zm4vLy4vIH0iCiAgICAgICAgYXJnPSgkKHNlZCAtbiAtZSAnL14jICpAYXJnICovIHtzLyMgKkBhcmcgKi8vOyBwO30nICIkMSIpKQogICAgICAgIFsgISAteiAiJHBhcmFtIiBdICYmCiAgICAgICAgICAgIHVzYWdlKz0iIFtvcHRpb25zXSR7YXJnOisgJHthcmdbKl19fVxub3B0aW9uczpcbiRwYXJhbSIgfHwKICAgICAgICAgICAgdXNhZ2UrPSIgJHthcmdbKl19IgoKICAgICAgICBSRVNbbGliXSs9IiQoCiAgICAgICAgICAgIGNhdCA8PERPQwpjYXNlICJcJDEiIGluIFw/IHwgLWggfCAtLWhlbHApCmNhdCA8PEVPRgp1c2FnZTogJHVzYWdlCkVPRgpleGl0IDAKOzsKZXNhY1xuCkRPQwogICAgICAgICkiCiAgICAgICAgcmV0dXJuIDAKICAgIH0KCiAgICBzY2FuLXNvdXJjZTo6bWFrZS1saWIoKQogICAgewogICAgICAgICMgQGFyZyAgICAgIDxzY29wZWRfc3JjX2Rpcj4KCiAgICAgICAgLnRyYWNlICIkQCIKCiAgICAgICAgbG9jYWwgcl9wYXRoIGZpbGUKICAgICAgICBsb2NhbCAtbCBiX3BhdGggYl9kaXIgcGFydHMgayB2IHNfa2V5IGZfa2V5IHBfa2V5IHN1YgogICAgICAgIGxvY2FsIC1hIHNlZW4KICAgICAgICBsb2NhbCAtaSBpCgogICAgICAgIHJfcGF0aD0iJChyZWFscGF0aCAiJDEiKSIKICAgICAgICBiX3BhdGg9IiR7cl9wYXRoIyMqIiQoZGlybmFtZSAiJHNyYyIpIlwvfSIKCiAgICAgICAgW1sgJGJfcGF0aCA9PSAqJyAnKiBdXSAmJgogICAgICAgICAgICBwOiAtdyBiYXNlIHBhdGggY29udGFpbnMgc3BhY2UgdGhhdCB3aWxsIGJlIHJlcGxhY2VkIHdpdGggJyItIic6IFwKICAgICAgICAgICAgICAgICIke2JfcGF0aCUlXC8qfS9cMDMzWzMxbSR7Yl9wYXRoIypcL31cMDMzWzBtIgoKICAgICAgICBwdXNoZCAiJHJfcGF0aCIgPi9kZXYvbnVsbAoKICAgICAgICB3aGlsZSBJRlM9IHJlYWQgLXJhIGZpbGU7IGRvCiAgICAgICAgICAgIFsgISAtciAiJGZpbGUiIF0gJiYgY29udGludWUgIyBza2lwIGluYWNjZXNzaWJsZQoKICAgICAgICAgICAgX189IiQocmVhbHBhdGggIiRmaWxlIikiCiAgICAgICAgICAgIGZuPSIkKHA6IC0tZm4gIiR7X18jIyokc2NvcGVcL30iKSIKICAgICAgICAgICAgX189IiQoZGlybmFtZSAiJF9fIikiCiAgICAgICAgICAgIGJfZGlyPSIke19fIyMqXC99IiAmJiB1bnNldCBfXwoKICAgICAgICAgICAgWyAiJHtiX2Rpcn0iID09IHB1YmxpYyBdICYmCiAgICAgICAgICAgICAgICBbWyAhICIgJHtNQUlOTElTVFtAXX0gIiA9fiAiICRmbiAiIF1dICYmCiAgICAgICAgICAgICAgICBNQUlOTElTVCs9KCIkZm4iKQoKICAgICAgICAgICAgWyAtZCAiJGZpbGUiIF0gJiYgewogICAgICAgICAgICAgICAgWyAiJHNjb3BlIiA9PSBwdWJsaWMgXSAmJiBbICIke2JfZGlyfSIgIT0gcHVibGljIF0gJiYgewogICAgICAgICAgICAgICAgICAgIHN1Yj0iJChwOiAtLWZuICIkZmlsZSIpIgogICAgICAgICAgICAgICAgICAgIHBfa2V5PSIkc3ViW3ByZV0iCiAgICAgICAgICAgICAgICAgICAgSEVMUE1BUFskcF9rZXldPSIke2ZuJSUuJHN1Yip9IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc2Nhbi1zb3VyY2U6Om1ha2UtbGliICIkZmlsZSIKICAgICAgICAgICAgfSB8fCB7CiAgICAgICAgICAgICAgICBbIC16ICIkKGhlYWQgLW41ICIkZmlsZSIpIiBdICYmIGNvbnRpbnVlICMgc2tpcCBlbXB0eQoKICAgICAgICAgICAgICAgIFtbICIgJHtzZWVuW0BdfSAiID1+ICIgJGZuICIgXV0gJiYKICAgICAgICAgICAgICAgICAgICAuZGllIC1lIGR1cGxpY2F0ZSBmdW5jdGlvbiBmb3VuZCBiZXR3ZWVuIHNjb3BlczogIiRmbiIKCiAgICAgICAgICAgICAgICBSRVNbbGliXSs9ImZ1bmN0aW9uICRmbiB7XG4iCgogICAgICAgICAgICAgICAgWyAiJHNjb3BlIiA9PSBwdWJsaWMgXSAmJiB7CiAgICAgICAgICAgICAgICAgICAgc2Nhbi1zb3VyY2U6Om1ha2UtaGVscGRvYyAiJGZpbGUiCgogICAgICAgICAgICAgICAgICAgIFsgIiR7Yl9kaXIsLH0iICE9IHB1YmxpYyBdICYmIHsKICAgICAgICAgICAgICAgICAgICAgICAgSUZTPScuJwogICAgICAgICAgICAgICAgICAgICAgICByZWFkIC1yYSBwYXJ0cyA8PDwiJGZuIgogICAgICAgICAgICAgICAgICAgICAgICB1bnNldCBJRlMKCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoKGkgPSAwOyBpIDwgJHsjcGFydHNbQF19IC0gMTsgaSsrKSk7IGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrPSIke3BhcnRzW2ldfSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHY9IiR7cGFydHNbaSArIDFdfSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNfa2V5PSIka1tzdWJdIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZl9rZXk9IiRrW2ZuXSIKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbWyAhICR7U1VCTUFQWyRzX2tleV19ID1+ICIkdiAiIF1dICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyAhIC16ICIkdiIgXSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNVQk1BUFskc19rZXldKz0iJHYgIiAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhFTFBNQVBbJHNfa2V5XSs9IiR2ICIKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbICIkKHA6IC0tZm4gIiRiX2RpciIpIiA9PSAiJGsiIF0gJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbICEgLXogIiRmbiIgXSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNVQk1BUFskZl9rZXldKz0iJGZuICIKICAgICAgICAgICAgICAgICAgICAgICAgZG9uZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIFJFU1tsaWJdKz0iJChncmVwICdeW14jXScgIiRmaWxlIilcbn1cbiIKICAgICAgICAgICAgICAgIHNlZW4rPSgiJGZuIikKICAgICAgICAgICAgfQogICAgICAgIGRvbmUgPDw8IiQobHMpIgoKICAgICAgICBwb3BkID4vZGV2L251bGwKCiAgICAgICAgcmV0dXJuIDAKICAgIH0KCiAgICBsb2NhbCBzcmMgZGVjbGFyZXMKICAgIGxvY2FsIC1sIGZuCgogICAgZm9yIHNjb3BlIGluIHByaXZhdGUgcHVibGljOyBkbwogICAgICAgIHNyYz0iJDEvJHNjb3BlIgogICAgICAgIFsgLWQgIiRzcmMiIF0gJiYKICAgICAgICAgICAgc2Nhbi1zb3VyY2U6Om1ha2UtbGliICIkc3JjIgogICAgZG9uZQoKICAgIFsgIiR7Y1tzW2xpYm9ubHldXX0iICE9IHRydWUgXSAmJiB7CiAgICAgICAgIyBtb3ZlIGFsbCBkZWNsYXJlIHN0YXRlbWVudHMsIGV4Y2VwdCBmb3IgdGhvc2Ugd2l0aCAtRwogICAgICAgIGRlY2xhcmVzPSdeZGVjbGFyZVxzKlwtW15HXVxzKi4qJCcKICAgICAgICBSRVNbdmFyXT0iJChlY2hvIC1lICIke3JbbGliXX0iIHwgZ3JlcCAtRSAiJGRlY2xhcmVzIikiCiAgICAgICAgUkVTW2xpYl09IiQoZWNobyAtZSAiJHtyW2xpYl19IiB8IGdyZXAgLXZFICIkZGVjbGFyZXMiKVxuIgogICAgfQoKICAgIHJldHVybiAwCn0KCmZ1bmN0aW9uIG1haW46Om1ha2UtZXhlYwp7CiAgICAudHJhY2UgIiRAIgoKICAgIGxvY2FsIC1sIHMgbSBjbWQgc3ViIG9wdCBmbiBzX2tleSBmX2tleSBoX2tleSBwX2tleQogICAgbG9jYWwgLWEgc2Vlbl9mbiBzZWVuX29wdCBzZWVuX3N1YgogICAgbG9jYWwgaF9vcHQgdl9vcHQgb3B0aW9ucyBoZWxwCgogICAgaF9vcHQ9IiQocHJpbnRmICIgICUtMjBzJXNcbiIgIi1oLC0taGVscCIgInByaW50IHRoaXMgaGVscCBtZXNzYWdlIikiCiAgICB2X29wdD0iJChwcmludGYgIiAgJS0yMHMlc1xuIiAiLXYsLS12ZXJzaW9uIiBcCiAgICAgICAgInByaW50IHRoZSBjdXJyZW50IHZlcnNpb24gb2YgdGhpcyBleGVjdXRhYmxlIikiCgogICAgZm9yIHMgaW4gIiR7IVNVQk1BUFtAXX0iOyBkbwogICAgICAgIHN1Yj0iJHtzJVsqfSIKICAgICAgICBzX2tleT0iJHN1YltzdWJdIgogICAgICAgIGZfa2V5PSIkc3ViW2ZuXSIKICAgICAgICBwX2tleT0iJHN1YltwcmVdIgogICAgICAgIG9wdGlvbnM9CiAgICAgICAgaGVscD0KCiAgICAgICAgd2hpbGUgSUZTPSByZWFkIC1yYSBvcHQ7IGRvCiAgICAgICAgICAgIHdoaWxlIElGUz0gcmVhZCAtcmEgZm47IGRvCiAgICAgICAgICAgICAgICAjIG5lc3RlZCBmdW5jdGlvbnMKICAgICAgICAgICAgICAgIFsgIiR7Zm4jIyoufSIgPT0gIiRvcHQiIF0gJiYKICAgICAgICAgICAgICAgICAgICBbWyAhICIgJHtzZWVuX2ZuW0BdfSAiID1+ICIgJGZuICIgXV0gJiYgewogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMrPSIkb3B0KSBzaGlmdCAmJiAkZm4gXCJcJEBcIjsgZXhpdCBcJD8gOztcbiIKICAgICAgICAgICAgICAgICAgICBoZWxwKz0iJChwcmludGYgIiAgJS0yMHMlc1xuIiBcCiAgICAgICAgICAgICAgICAgICAgICAgICIkb3B0IiAiJHtIRUxQTUFQWyRmbl19XG4iKSIKICAgICAgICAgICAgICAgICAgICBzZWVuX2ZuKz0oIiRmbiIpCiAgICAgICAgICAgICAgICAgICAgc2Vlbl9vcHQrPSgiJG9wdCIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIGRvbmUgPDw8IiQoZWNobyAtZSAiJHtTVUJNQVBbJGZfa2V5XS8vXCAvXFxufSIpIgoKICAgICAgICAgICAgIyBuZXN0ZWQgc3ViLW1vZHVsZXMKICAgICAgICAgICAgW1sgISAiICR7c2Vlbl9vcHRbQF19ICIgPX4gIiAkb3B0ICIgXV0gJiYgewogICAgICAgICAgICAgICAgaF9rZXk9IiRvcHRbc3ViXSIKICAgICAgICAgICAgICAgIG9wdGlvbnMrPSIkb3B0KSBzaGlmdCAmJiAkb3B0IFwiXCRAXCI7IGV4aXQgXCQ/IDs7XG4iCiAgICAgICAgICAgICAgICBoZWxwKz0iJChwcmludGYgIiAgJS0yMHMlc1xuIiBcCiAgICAgICAgICAgICAgICAgICAgIiRvcHQiICJ7JChlY2hvIC1lICIke0hFTFBNQVBbJGhfa2V5XS8vXCAvLFwgfSIgfAogICAgICAgICAgICAgICAgICAgICAgICBzZWQgJ3MvLFwgKiQvLycpfVxuIikiCiAgICAgICAgICAgICAgICBzZWVuX29wdCs9KCIkb3B0IikKICAgICAgICAgICAgfQogICAgICAgIGRvbmUgPDw8IiQoZWNobyAtZSAiJHtTVUJNQVBbJHNfa2V5XS8vXCAvXFxufSIpIgoKICAgICAgICBbWyAhICIgJHtzZWVuX3N1YltAXX0gIiA9fiAiICRzdWIgIiBdXSAmJiB7CiAgICAgICAgICAgIFsgISAteiAiJHtIRUxQTUFQWyRwX2tleV19IiBdICYmIHsKICAgICAgICAgICAgICAgIGNtZD0iJHtIRUxQTUFQWyRwX2tleV0vLy4vXCB9ICRzdWIiCiAgICAgICAgICAgIH0gfHwgY21kPSIkc3ViIgoKICAgICAgICAgICAgUkVTW2Jpbl0rPSIkKAogICAgICAgICAgICAgICAgY2F0IDw8RE9DCiRzdWIoKSB7CiQoCiAgICAgICAgICAgICAgICAgICAgWyAiJHtjW3NbZXJyX25vYXJnc11dfSIgPT0gdHJ1ZSBdICYmCiAgICAgICAgICAgICAgICAgICAgICAgIGNhdCA8PERPQ0MKKCghXCQjKSkgJiYgewplY2hvIG5vIGFyZ3VtZW50cyBwcm92aWRlZAplY2hvIHByaW50IGhlbHAgd2l0aCAiXCR7MCMjKlwvfSIgJGNtZCAtLWhlbHAKZXhpdCAxCn0KRE9DQwogICAgICAgICAgICAgICAgKQp3aGlsZSAoKFwkIykpOyBkbwpjYXNlICJcJDEiIGluClw/IHwgLWggfCAtLWhlbHApCmNhdCA8PEVPRgp1c2FnZTogXCR7MCMjKlwvfSAkY21kIFtvcHRpb25zXQpvcHRpb25zOgokaGVscAokaF9vcHQKRU9GCmV4aXQgMAo7Owokb3B0aW9ucwokKAogICAgICAgICAgICAgICAgICAgIFsgIiR7Y1tzW2Vycl9pbGxlZ2Fsb3B0XV19IiA9PSB0cnVlIF0gJiYKICAgICAgICAgICAgICAgICAgICAgICAgY2F0IDw8RE9DQwoqKSBlY2hvIGlsbGVnYWwgb3B0aW9uOiAiJ1wkMSciICYmIGV4aXQgMSA7OwpET0NDCiAgICAgICAgICAgICAgICApCgplc2FjCnNoaWZ0CmRvbmUKfVxuCkRPQwogICAgICAgICAgICApIgogICAgICAgICAgICBzZWVuX3N1Yis9KCIkc3ViIikKICAgICAgICB9CiAgICBkb25lCiAgICB1bnNldCBvcHRpb25zIGhlbHAgaF9rZXkKCiAgICBmb3IgbSBpbiAiJHtNQUlOTElTVFtAXX0iOyBkbwogICAgICAgIGhfa2V5PSIkbVtzdWJdIgogICAgICAgIG9wdGlvbnMrPSIkbSkgc2hpZnQgJiYgJG0gXCJcJEBcIjsgZXhpdCBcJD87O1xuIgogICAgICAgIFsgISAteiAiJHtIRUxQTUFQWyRoX2tleV19IiBdICYmIHsKICAgICAgICAgICAgaGVscCs9IiQocHJpbnRmICIgICUtMjBzJXNcbiIgXAogICAgICAgICAgICAgICAgIiRtIiAieyQoZWNobyAtZSAiJHtIRUxQTUFQWyRoX2tleV0vL1wgLyxcIH0iIHwKICAgICAgICAgICAgICAgICAgICBzZWQgJ3MvLFwgKiQvLycpfVxuIikiCiAgICAgICAgfSB8fCBoZWxwKz0iJChwcmludGYgIiAgJS0yMHMlc1xuIiAiJG0iICIke0hFTFBNQVBbJG1dfVxuIikiCiAgICBkb25lCgogICAgUkVTW2Jpbl0rPSIkKAogICAgICAgIGNhdCA8PERPQwokKAogICAgICAgICAgICBbICIke2Nbc1tlcnJfbm9hcmdzXV19IiA9PSB0cnVlIF0gJiYKICAgICAgICAgICAgICAgIGNhdCA8PERPQ0MKKCghXCQjKSkgJiYgewplY2hvIG5vIGFyZ3VtZW50cyBwcm92aWRlZAplY2hvIHByaW50IGhlbHAgd2l0aCAiXCR7MCMjKlwvfSIgLS1oZWxwCmV4aXQgMQp9CkRPQ0MKICAgICAgICApCl9fVkVSU0lPTl9fPSIke2Nbc1t2ZXJzaW9uXV19Igoke3JbdmFyXX0Kd2hpbGUgKChcJCMpKTsgZG8KY2FzZSAiXCQxIiBpbgpcPyB8IC1oIHwgLS1oZWxwKQpjYXQgPDxFT0YKdXNhZ2U6IFwkezAjIypcL30gW29wdGlvbnNdCm9wdGlvbnM6CiRoZWxwCiR2X29wdAokaF9vcHQKRU9GCmV4aXQgMAo7OwotdiB8IC0tdmVyc2lvbikKZWNobyAiXCRfX1ZFUlNJT05fXyIKZXhpdCAwCjs7CiRvcHRpb25zCiQoCiAgICAgICAgICAgIFsgIiR7Y1tzW2Vycl9pbGxlZ2Fsb3B0XV19IiA9PSB0cnVlIF0gJiYKICAgICAgICAgICAgICAgIGNhdCA8PERPQ0MKKikgZWNobyBpbGxlZ2FsIG9wdGlvbjogIidcJDEnIiAmJiBleGl0IDEgOzsKRE9DQwogICAgICAgICkKCmVzYWMKc2hpZnQKZG9uZQpleGl0IDAKRE9DCiAgICApIgoKICAgIHJldHVybiAwCn0KCiMgbWFpbgpkZWNsYXJlIC1BIEFSRyBPUFQgQ09ORklHIFJFUyBTVUJNQVAgSEVMUE1BUApkZWNsYXJlIC1hIE1BSU5MSVNUCmRlY2xhcmUgLW4gYz1DT05GSUcgcj1SRVMgYT1BUkcgbz1PUFQKX19CVU5TSF9WRVJTSU9OX189MS4yLjAKX189Cgp3aGlsZSAoKCQjKSk7IGRvCiAgICBjYXNlICIkMSIgaW4KICAgIC12IHwgLS12ZXJzaW9uKQogICAgICAgIGVjaG8gIiRfX0JVTlNIX1ZFUlNJT05fXyIKICAgICAgICBleGl0IDAKICAgICAgICA7OwogICAgLWMgfCAtLWNvbmZpZykKICAgICAgICBbIC16ICIkMiIgXSAmJiAuZGllIG5vIHZhbHVlIHByb3ZpZGVkOiAiJDEgPyIKICAgICAgICBBUkdbY109IiQyIgogICAgICAgIHNoaWZ0CiAgICAgICAgOzsKICAgIC1zIHwgLS1zcmMpCiAgICAgICAgWyAteiAiJDIiIF0gJiYgLmRpZSBubyB2YWx1ZSBwcm92aWRlZDogIiQxID8iCiAgICAgICAgQVJHW2Jbc3JjXV09IiQyIgogICAgICAgIHNoaWZ0CiAgICAgICAgOzsKICAgIC1vIHwgLS1vdXQpCiAgICAgICAgWyAteiAiJDIiIF0gJiYgLmRpZSBubyB2YWx1ZSBwcm92aWRlZDogIiQxID8iCiAgICAgICAgQVJHW2Jbb3V0XV09IiQyIgogICAgICAgIHNoaWZ0CiAgICAgICAgOzsKICAgIC1uIHwgLS1uYW1lKQogICAgICAgIFsgLXogIiQyIiBdICYmIC5kaWUgbm8gdmFsdWUgcHJvdmlkZWQ6ICIkMSA/IgogICAgICAgIEFSR1tiW25hbWVdXT0iJDIiCiAgICAgICAgc2hpZnQKICAgICAgICA7OwogICAgLS1vcHQgfCAtLW9wdGlvbikKICAgICAgICBbIC16ICIkMiIgXSAmJiAuZGllIG5vIHZhbHVlIHByb3ZpZGVkOiAiJDEgPyIKICAgICAgICBrPSIkKHA6IC1rICIkMiIgLWQgPSkiCiAgICAgICAgdj0iJChwOiAtdiAiJDIiIC1kID0pIgogICAgICAgIFsgLXogIiR2IiBdICYmIC5kaWUgbm8gdmFsdWUgcHJvdmlkZWQ6ICIkayA/IgogICAgICAgIE9QVFsiJGsiXT0iJHYiCiAgICAgICAgdW5zZXQgayB2CiAgICAgICAgc2hpZnQKICAgICAgICA7OwogICAgLWQgfCAtLWRyeS1ydW4pCiAgICAgICAgQVJHW2RdPXRydWUKICAgICAgICA7OwogICAgLXEgfCAtLXF1aWV0KQogICAgICAgIGV4ZWMgPi9kZXYvbnVsbCAyPiYxCiAgICAgICAgOzsKICAgIC14IHwgLXh4IHwgLS12ZXJib3NlKQogICAgICAgIFsgIiR7MSMqLX0iID09IHh4IF0gJiYgQVJHW3h4XT10cnVlCiAgICAgICAgQVJHW3hdPXRydWUKICAgICAgICA7OwogICAgXD8gfCAtaCB8IC0taGVscCkKICAgICAgICBjYXQgPDxFT0YKdXNhZ2U6ICR7X19NQUlOX18jIypcL30gW29wdGlvbnNdCm9wdGlvbnM6CiAgLWMsLS1jb25maWcgPGZpbGU+ICBzcGVjaWZ5IGEgY29uZmlnIGZpbGUgdG8gcmVhZCBmcm9tCiAgLXMsLS1zcmMgPHBhdGg+ICAgICBzcGVjaWZ5IGEgc291cmNlIGRpcmVjdG9yeSB0byByZWFkIGZyb20KICAtbywtLW91dCA8cGF0aD4gICAgIHNwZWNpZnkgYW4gb3V0cHV0IGRpcmVjdG9yeSB0byBwbGFjZSB0aGUgYnVuZGxlCiAgLW4sLS1uYW1lIDx2YWw+ICAgICBzcGVjaWZ5IGEgbmFtZSBmb3IgdGhlIGJ1bmRsZQogIC0tb3B0IDxrZXk+PTx2YWw+ICAgc3BlY2lmeSBhZGRpdGlvbmFsIGNvbmZpZyBvcHRpb24KICAtZCwtLWRyeS1ydW4gICAgICAgIGRvIG5vdCB3cml0ZSBidW5kbGUgdG8gZmlsZSwgcHJpbnQgdG8gY29uc29sZQogIC1xLC0tcXVpZXQgICAgICAgICAgc3VwcHJlc3MgYWxsIG91dHB1dCB0byBjb25zb2xlCiAgLXgsLXh4LC0tdmVyYm9zZSAgICBwcmludCB2ZXJib3NlIG91dHB1dCB0byB0aGUgY29uc29sZQogIC1oLC0taGVscCAgICAgICAgICAgcHJpbnQgdGhpcyBoZWxwIG1lc3NhZ2UKICAtdiwtLXZlcnNpb24gICAgICAgIHByaW50IHZlcnNpb24KRU9GCiAgICAgICAgZXhpdCAwCiAgICAgICAgOzsKICAgICopCiAgICAgICAgZWNobyBpbGxlZ2FsIG9wdGlvbjogIiQxIgogICAgICAgIGV4aXQgMQogICAgICAgIDs7CiAgICBlc2FjCiAgICBzaGlmdApkb25lCgptYWluOjpjaGVjay1kZXBlbmRlbmNpZXMKCiMgZGVmYXVsdHMKQ09ORklHW2Jbc3JjXV09Li9zcmMKQ09ORklHW2Jbb3V0XV09Li9vdXQKQ09ORklHW2JbbmFtZV1dPWJ1bmRsZWQKQ09ORklHW3NbdmVyc2lvbl1dPTAuMS4wCkNPTkZJR1tzW2xpYm9ubHldXT1mYWxzZQpDT05GSUdbc1tlcnJfbm9hcmdzXV09ZmFsc2UKQ09ORklHW3NbZXJyX2lsbGVnYWxvcHRdXT1mYWxzZQoKWyAhIC16ICIke2FbY119IiBdICYmCiAgICBtYWluOjpsb2FkLWNvbmZpZyAiJHthW2NdfSIgfHwKICAgIG1haW46OmxvYWQtY29uZmlnICIkUFdEL2J1bnNoLmNvbmZpZyIgfHwKICAgIHA6IC14IG5vIGNvbmZpZyBmaWxlIGxvYWRlZCAtIGZhbGxpbmcgYmFjayB0byBkZWZhdWx0cyBhbmQgYXJndW1lbnRzCgptYWluOjpwYXJzZS1hcmdzCm1haW46OnNjYW4tc291cmNlICIke2NbYltzcmNdXX0iCgpbICIke2Nbc1tsaWJvbmx5XV19IiA9PSB0cnVlIF0gJiYgewogICAgcDogLXggY3JlYXRpbmcgbGlicmFyeSBPTkxZCiAgICBSRVNbbGliXT0iJChlY2hvIC1lICIke3JbbGliXX0iIHwgc2VkICdzL2V4aXQvcmV0dXJuL2cnKSIKfSB8fCBtYWluOjptYWtlLWV4ZWMKClJFU1tib2R5XT0iJCgKICAgIGNhdCA8PERPQwojIS91c3IvYmluL2VudiBiYXNoCiMgYnVuZGxlZCB3aXRoIGJ1bnNoIC0gaHR0cHM6Ly9naXRodWIuY29tL0thbWFyYW5ML2J1bnNoCiR7cltsaWJdfQoke3JbYmluXX0KRE9DCikiCgpbICIke2FbZF19IiA9PSB0cnVlIF0gJiYgewogICAgZWNobyAtZSAiJHtyW2JvZHldfSIgfCBncmVwIC12ICdeJCcKfSB8fCB7CiAgICBbICIke2NbYltuYW1lXV19IiA9PSBidW5kbGVkIF0gJiYgewogICAgICAgIF9fPSIkKHNoYTI1NnN1bSA8PDwiJHtyW2JvZHldfSIpIgogICAgICAgIF9fPSIke19fJVwgXCAqfSIKICAgICAgICBDT05GSUdbYltuYW1lXV0rPS0iJHtfXzogLTh9IgogICAgICAgIHVuc2V0IF9fCiAgICB9CgogICAgcDogLXggd3JpdGluZyBmaWxlOiAiJHtjW2Jbb3V0XV19LyR7Y1tiW25hbWVdXX0iCgogICAgWyAhIC1kICIke2NbYltvdXRdXX0iIF0gJiYgbWtkaXIgLXAgIiR7Y1tiW291dF1dfSIKICAgIGVjaG8gLWUgIiR7cltib2R5XX0iIHwgZ3JlcCAtdiAnXiQnID4iJHtjW2Jbb3V0XV19LyR7Y1tiW25hbWVdXX0iCgogICAgWyAhIC16ICIkKGNhdCAke2NbYltvdXRdXX0vJHtjW2JbbmFtZV1dfSkiIF0gJiYgewogICAgICAgIGNobW9kICt4ICIke2NbYltvdXRdXX0vJHtjW2JbbmFtZV1dfSIKICAgICAgICBlY2hvICJbICQoZGF0ZSArIiVZLSVtLSVkICVIOiVNOiVTIikgXSIgXAogICAgICAgICAgICAiJHtjW2JbbmFtZV1dfSAodiR7Y1tzW3ZlcnNpb25dXX0pIiAiPT4iIFwKICAgICAgICAgICAgIiQocmVhbHBhdGggJHtjW2Jbb3V0XV19LyR7Y1tiW25hbWVdXX0pIgoKICAgICAgICBwOiAteCBzdGFydCB1c2luZyAiJyR7Y1tiW25hbWVdXX0nIiB3aXRoIG9uZSBvZiB0aGUgZm9sbG93aW5nIFwKICAgICAgICAgICAgb3B0aW9uczonXG4gICAnIFwKICAgICAgICAgICAgLSBhcHBlbmQgdGhlIGZvbGxvd2luZyB0byB5b3VyICd+Ly5iYXNoX3Byb2ZpbGUnOiBcCiAgICAgICAgICAgICJleHBvcnQgUEFUSD1cJFBBVEg6JChyZWFscGF0aCAke2NbYltvdXRdXX0pXG4gICAiIFwKICAgICAgICAgICAgLSBjcmVhdGUgYSBzeW1ib2xpYyBsaW5rIGJ5IGV4ZWN1dGluZzogJ3N1ZG8gbG4gLXMnIFwKICAgICAgICAgICAgIiQocmVhbHBhdGggJHtjW2Jbb3V0XV19LyR7Y1tiW25hbWVdXX0pIiBcCiAgICAgICAgICAgICIvdXNyL2Jpbi8ke2NbYltuYW1lXV19IgogICAgfSB8fCAuZGllIC1lIGNvdWxkIG5vdCB3cml0ZSBmaWxlOiAiJHtjW2Jbb3V0XV19LyR7Y1tiW25hbWVdXX0iCn0KCnA6IC1hIC14IENPTkZJRwoKZXhpdCAwCg=='
__MAIN__="${0##*\/}" \
/usr/bin/env bash <(base64 -d <<<"$MAIN") "$@"
exit $?
