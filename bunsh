#!/bin/bash
# 581d22a1cdc809ae93f28955a6100f3914ae1f2b9d55fdcc464cc40a5e878e56
MAIN='#!/usr/bin/env bash

((${BASH_VERSION::1} < 4)) && {
    echo -e "\033[1mERROR\033[0m\t${__MAIN__} requires bash >=4.x"
    exit 1
}

function p:
{ # print
    (($# == 0)) && return 1

    p::a()
    { # array
        #@param     $1=array name

        local k
        local -n array="$1"

        res+="$pre$1=(\n"
        for k in "${!array[@]}"; do
            res+="$(
                printf "%.0s " {1..4} &&
                    printf "${k}=${array[$k]}%s" "\n"
            )"
        done
        res+="$pre)\n"

        return 0
    }

    p::kvp()
    { # key-value pair
        local -A arg
        local -a pos
        local res

        while (($# > 0)); do
            case "$1" in
            -d) # delimiter
                [ ! -z "$2" ] &&
                    arg[d]="$2" && shift
                ;;
            -k) # key
                arg[k]=true
                ;;
            -v) # value
                arg[v]=true
                ;;
            *) # positionals
                pos+=("$1")
                ;;
            esac
            shift
        done
        ((${#pos[@]} < 1)) && return 1

        [ -z "${arg[d]}" ] && arg[d]=' '
        IFS="${arg[d]}"
        read -ra res <<<"${pos[@]}"
        unset IFS

        if [ "${arg[k]}" == true ]; then
            [ -z "${res[0]}" ] && return 1
            echo -e "${res[0]}" && return 0
        elif [ "${arg[v]}" == true ]; then
            [ -z "${res[1]}" ] && return 1
            echo -e "${res[1]}" && return 0
        fi
    }

    local -A arg
    local -a pos
    local res pre

    while (($# > 0)); do
        case "$1" in
        -a) # array
            arg[a]=true
            ;;
        -e) # error
            arg[e]=true
            ;;
        --fn) # function name format
            [ -z "$2" ] && return 1
            res="${2//\ /-}" && res="${res//\//.}"
            echo -e "${res,,}" && return 0
            ;;
        -k | -v) # key | value
            p::kvp "$@"
            return $?
            ;;
        -w) # warn
            arg[w]=true
            ;;
        -x) # verbose/test
            arg[x]=true
            ;;
        *) # positionals
            pos+=("$1")
            ;;
        esac
        shift
    done
    ((${#pos[@]} < 1)) && return 1

    [ "${arg[x]}" == true ] && {
        [ "${a[x]}" == true ] && {
            pre="### "
        } || return 0
    }

    [ "${arg[a]}" == true ] && {
        for arr in "${pos[@]}"; do
            p::a "$arr"
        done
        echo -e "$res" && return 0
    } || res="${pos[*]}"

    if [ "${arg[w]}" == true ]; then
        pre="\033[1mWARN\033[0m\t"
    elif [ "${arg[e]}" == true ]; then
        pre="\033[1mERROR\033[0m\t"
    fi

    echo -e "$pre$res"
    return 0
}

function .trace
{ #print (void-only) caller function
    [ "${a[xx]}" != true ] && return 1
    p: -x invoking "${FUNCNAME[1]}($*)" && return 0
}

function .die
{ #print && exit
    local -a pos
    local res err

    while (($# > 0)); do
        case "$1" in
        -e) # error
            err="true"
            ;;
        *)
            pos+=("$1")
            ;;
        esac
        shift
    done

    res="${pos[*]}"

    [ "$err" == true ] && {
        p: -e "$res" && exit 1
    } || echo -e "$res" && exit 1
}

function main::check-dependencies
{
    .trace "$@"

    local deps bin

    deps=(
        bash
        cat
        date
        dirname
        grep
        mkdir
        realpath
        sed
        sha256sum
    )

    for bin in "${deps[@]}"; do
        p: -x checking dependency: $bin
        ! command -v $bin &>/dev/null &&
            .die -e $bin not found \
                '\n  '- please install before proceeding
    done

    return 0
}

function main::load-config
{
    #@param     $1=path to config file

    .trace "$@"

    [ ! -r "$1" -o -d "$1" ] && {
        p: -w cannot read config file: "$1"
        return 1
    }

    local -a valid_keys lines
    local -l v_key c_key k
    local line v

    lines=($(grep '^[^#]' "$1"))
    valid_keys=(
        b.src
        b.name
        b.out
        b.name
        s.version
        s.libonly
        s.err_noargs
        s.err_illegalopt
    )

    for v_key in "${valid_keys[@]}"; do
        c_key="${v_key%.*}[${v_key#*.}]"
        v=
        for line in "${lines[@]}"; do
            k="$(p: -k "$line" -d =)"

            [ "$v_key" == "$k" ] && {
                v="$(p: -v "$line" -d =)"
                break
            }
        done

        [ -z "$v" ] && {
            [ ! -z "${c[$c_key]}" ] &&
                p: -x "'$v_key'" not found, using default: "${c[$c_key]}"
            continue
        }

        CONFIG[$c_key]="$v"
    done

    return 0
}

function main::parse-args
{
    .trace "$@"

    local -l key o_key

    for key in "${!c[@]}"; do
        __="${key//\[/.}"
        o_key="${__//\]/}"

        [ ! -z "${o[$o_key]}" ] && {
            p: -x option provided - overriding "${c[$key]} => ${o[$o_key]}"
            CONFIG[$key]="${o[$o_key]}"
        }
        [ ! -z "${a[$key]}" ] && {
            p: -x arg provided - overriding "${c[$key]} => ${a[$key]}"
            CONFIG[$key]="${a[$key]}"
        }
    done
    unset __

    return 0
}

function main::scan-source
{
    #@param     $1=path to source directory

    .trace "$@"

    [ -d "$1" ] || [ -r "$1" ] || .die -e cannot access source directory: "$1"

    scan-source::make-helpdoc()
    {
        #@param     $1=path to source file

        .trace "$@"

        local line desc param

        desc=($(sed -n -e '/^# *@desc */ {s/# *@desc *//; p;}' "$1"))
        ((${#desc[@]} > 0)) &&
            HELPMAP[$fn]="${desc[*]}" ||
            HELPMAP[$fn]="-"

        while IFS= read -ra line; do
            __="$(p: -k "$line" -d =)" &&
                param+="$(printf "  %-20s%s" \
                    "${__//\$/\\\$}" "$(p: -v "$line" -d =)\n")"
        done <<<"$(sed -n -e '/^# *@param */ {s/# *@param *//; p;}' "$1")"
        unset __

        param="${param:+ [options]\noptions:\n$param}"

        RES[lib]+="$(
            cat <<DOC
case "\$1" in \? | -h | --help)
cat <<EOF
usage: \${0##*\/} ${fn//./\ }$param
EOF
exit 1
;;
esac\n
DOC
        )"
        return 0
    }

    scan-source::make-lib()
    {
        #@param     $1=path to scoped source directory

        .trace "$@"

        local r_path file
        local -l b_path b_dir parts k v s_key f_key p_key sub
        local -a seen
        local -i i

        r_path="$(realpath "$1")"
        b_path="${r_path##*"$(dirname "$src")"\/}"

        [[ $b_path == *' '* ]] &&
            p: -w base path contains space that will be replaced with '"-"': \
                "${b_path%%\/*}/\033[31m${b_path#*\/}\033[0m"

        pushd "$r_path" >/dev/null

        while IFS= read -ra file; do
            [ ! -r "$file" ] && continue # skip inaccessible

            __="$(realpath "$file")"
            fn="$(p: --fn "${__##*$scope\/}")"
            __="$(dirname "$__")"
            b_dir="${__##*\/}" && unset __

            [ "${b_dir}" == public ] &&
                [[ ! " ${MAINLIST[@]} " =~ " $fn " ]] &&
                MAINLIST+=("$fn")

            [ -d "$file" ] && {
                [ "$scope" == public ] && [ "${b_dir}" != public ] && {
                    sub="$(p: --fn "$file")"
                    p_key="$sub[pre]"
                    HELPMAP[$p_key]="${fn%%.$sub*}"
                }
                scan-source::make-lib "$file"
            } || {
                [ -z "$(head -n5 "$file")" ] && continue # skip empty

                [[ " ${seen[@]} " =~ " $fn " ]] &&
                    .die -e duplicate function found between scopes: "$fn"

                RES[lib]+="function $fn {\n"

                [ "$scope" == public ] && {
                    scan-source::make-helpdoc "$file"

                    [ "${b_dir,,}" != public ] && {
                        IFS='.'
                        read -ra parts <<<"$fn"
                        unset IFS

                        for ((i = 0; i < ${#parts[@]} - 1; i++)); do
                            k="${parts[i]}"
                            v="${parts[i + 1]}"
                            s_key="$k[sub]"
                            f_key="$k[fn]"

                            [[ ! ${SUBMAP[$s_key]} =~ "$v " ]] &&
                                [ ! -z "$v" ] &&
                                SUBMAP[$s_key]+="$v " &&
                                HELPMAP[$s_key]+="$v "

                            [ "$(p: --fn "$b_dir")" == "$k" ] &&
                                [ ! -z "$fn" ] &&
                                SUBMAP[$f_key]+="$fn "
                        done
                    }
                }
                RES[lib]+="$(grep '^[^#]' "$file")\n}\n"
                seen+=("$fn")
            }
        done <<<"$(ls)"

        popd >/dev/null

        return 0
    }

    local src declares
    local -l fn

    for scope in private public; do
        src="$1/$scope"
        [ -d "$src" ] &&
            scan-source::make-lib "$src"
    done

    # move all declare statements, except for those with -G
    declares='^declare\s*\-[^G]\s*.*$'
    RES[var]="$(echo -e "${r[lib]}" | grep -E "$declares")"
    RES[lib]="$(echo -e "${r[lib]}" | grep -vE "$declares")\n"

    return 0
}

function main::make-exec
{
    .trace "$@"

    local -l s m cmd sub opt fn s_key f_key h_key p_key
    local -a seen_fn seen_opt seen_sub
    local h_opt v_opt options help

    h_opt="$(printf "  %-20s%s\n" "-h,--help" "print this help message")"
    v_opt="$(printf "  %-20s%s\n" "-v,--version" \
        "print the current version of this executable")"

    for s in "${!SUBMAP[@]}"; do
        sub="${s%[*}"
        s_key="$sub[sub]"
        f_key="$sub[fn]"
        p_key="$sub[pre]"
        options=
        help=

        while IFS= read -ra opt; do
            while IFS= read -ra fn; do
                # nested functions
                [ "${fn##*.}" == "$opt" ] &&
                    [[ ! " ${seen_fn[@]} " =~ " $fn " ]] && {
                    options+="$opt) shift && $fn \"\$@\"; exit \$? ;;\n"
                    help+="$(printf "  %-20s%s\n" \
                        "$opt" "${HELPMAP[$fn]}\n")"
                    seen_fn+=("$fn")
                    seen_opt+=("$opt")
                }
            done <<<"$(echo -e "${SUBMAP[$f_key]//\ /\\n}")"

            # nested sub-modules
            [[ ! " ${seen_opt[@]} " =~ " $opt " ]] && {
                h_key="$opt[sub]"
                options+="$opt) shift && $opt \"\$@\"; exit \$? ;;\n"
                help+="$(printf "  %-20s%s\n" \
                    "$opt" "{$(echo -e "${HELPMAP[$h_key]//\ /,\ }" |
                        sed 's/,\ *$//')}\n")"
                seen_opt+=("$opt")
            }
        done <<<"$(echo -e "${SUBMAP[$s_key]//\ /\\n}")"

        [[ ! " ${seen_sub[@]} " =~ " $sub " ]] && {
            [ ! -z "${HELPMAP[$p_key]}" ] && {
                cmd="${HELPMAP[$p_key]//./\ } $sub"
            } || cmd="$sub"

            RES[bin]+="$(
                cat <<DOC
$sub() {
$(
                    [ "${c[s[err_noargs]]}" == true ] &&
                        cat <<DOCC
((\$# == 0)) && {
echo no arguments provided
echo print help with "\${0##*\/}" $cmd --help
exit 1
}
DOCC
                )
while ((\$# > 0)); do
case "\$1" in
\? | -h | --help)
cat <<EOF
usage: \${0##*\/} $cmd [options]
options:
$help
$h_opt
EOF
exit 1
;;
$options
$(
                    [ "${c[s[err_illegalopt]]}" == true ] &&
                        cat <<DOCC
*) echo illegal option: "'\$1'" && exit 1 ;;
DOCC
                )

esac
shift
done
}\n
DOC
            )"
            seen_sub+=("$sub")
        }
    done
    unset options help h_key

    for m in "${MAINLIST[@]}"; do
        h_key="$m[sub]"
        options+="$m) shift && $m \"\$@\"; exit \$?;;\n"
        [ ! -z "${HELPMAP[$h_key]}" ] && {
            help+="$(printf "  %-20s%s\n" \
                "$m" "{$(echo -e "${HELPMAP[$h_key]//\ /,\ }" |
                    sed 's/,\ *$//')}\n")"
        } || help+="$(printf "  %-20s%s\n" "$m" "${HELPMAP[$m]}\n")"
    done

    RES[bin]+="$(
        cat <<DOC
$(
            [ "${c[s[err_noargs]]}" == true ] &&
                cat <<DOCC
((\$# == 0)) && {
echo no arguments provided
echo print help with "\${0##*\/}" --help
exit 1
}
DOCC
        )
VERSION="${c[s[version]]}"
${r[var]}
while ((\$# > 0)); do
case "\$1" in
\? | -h | --help)
cat <<EOF
usage: \${0##*\/} [options]
options:
$help
$v_opt
$h_opt
EOF
exit 1
;;
-v | --version)
echo "\$VERSION"
exit 1
;;
$options
$(
            [ "${c[s[err_illegalopt]]}" == true ] &&
                cat <<DOCC
*) echo illegal option: "'\$1'" && exit 1 ;;
DOCC
        )

esac
shift
done
exit 0
DOC
    )"

    return 0
}

# main
declare -A ARG OPT CONFIG RES SUBMAP HELPMAP
declare -a MAINLIST
declare -n c=CONFIG r=RES a=ARG o=OPT
__VERSION__=1.0.0
__=

while (($# > 0)); do
    case "$1" in
    -v | --version)
        echo "$__VERSION__" && exit 1
        ;;
    -c | --config)
        [ -z "$2" ] && .die no value provided: "$1 ?"
        ARG[c]="$2" && shift
        ;;
    -s | --src)
        [ -z "$2" ] && .die no value provided: "$1 ?"
        ARG[b[src]]="$2" && shift
        ;;
    -o | --out)
        [ -z "$2" ] && .die no value provided: "$1 ?"
        ARG[b[out]]="$2" && shift
        ;;
    -n | --name)
        [ -z "$2" ] && .die no value provided: "$1 ?"
        ARG[b[name]]="$2" && shift
        ;;
    --opt | --option)
        [ -z "$2" ] && .die no value provided: "$1 ?"
        k="$(p: -k "$2" -d =)"
        v="$(p: -v "$2" -d =)"
        [ -z "$v" ] && .die no value provided: "$k ?"
        OPT["$k"]="$v"
        unset k v
        shift
        ;;
    -d | --dry-run)
        ARG[d]=true
        ;;
    -q | --quiet)
        exec >/dev/null 2>&1
        ;;
    -x | -xx | --verbose)
        [ "${1#*-}" == xx ] && ARG[xx]=true
        ARG[x]=true
        ;;
    \? | -h | --help)
        cat <<EOF
usage: $__MAIN__ [options]
options:
  -c,--config <file>  specify a config file to read from
  -s,--src <path>     specify a source directory to read from
  -o,--out <path>     specify an output directory to place the bundle
  -n,--name <val>     specify a name for the bundle
  --opt <key>=<val>   specify additional config option
  -d,--dry-run        do not write bundle to file, print to console
  -q,--quiet          suppress all output to console
  -x,-xx,--verbose    print verbose output to the console
  -h,--help           print this help message
  -v,--version        print version
EOF
        exit 1
        ;;
    *)
        echo illegal option: "$1"
        exit 1
        ;;
    esac
    shift
done

main::check-dependencies

# defaults
CONFIG[b[src]]=./src
CONFIG[b[out]]=./out
CONFIG[b[name]]=bundled
CONFIG[s[version]]=0.1.0
CONFIG[s[libonly]]=false
CONFIG[s[err_noargs]]=false
CONFIG[s[err_illegalopt]]=false

[ ! -z "${a[c]}" ] &&
    main::load-config "${a[c]}" ||
    main::load-config "$PWD/bunsh.config" ||
    p: -x no config file loaded - falling back to defaults and arguments

main::parse-args
main::scan-source "${c[b[src]]}"

[ "${c[s[libonly]]}" == true ] && {
    p: -x creating library ONLY
    RES[lib]="$(echo -e "${r[lib]}" | sed 's/exit/return/g')"
} || main::make-exec

RES[body]='#!/usr/bin/env bash\n'
RES[body]+="${r[lib]}"
RES[body]+="${r[bin]}"

[ "${a[d]}" == true ] && {
    echo -e "${r[body]}" | grep -v '^$'
} || {
    [ "${c[b[name]]}" == bundled ] && {
        __="$(sha256sum <<<"${r[body]}")"
        __="${__%\ \ *}"
        CONFIG[b[name]]+=-"${__: -8}"
        unset __
    }

    p: -x writing file: "${c[b[out]]}/${c[b[name]]}"

    [ ! -d "${c[b[out]]}" ] && mkdir -p "${c[b[out]]}"
    echo -e "${r[body]}" | grep -v '^$' >"${c[b[out]]}/${c[b[name]]}"

    [ ! -z "$(cat ${c[b[out]]}/${c[b[name]]})" ] && {
        chmod +x "${c[b[out]]}/${c[b[name]]}"
        echo "[ $(date +"%Y-%m-%d %H:%M:%S") ]" \
            "${c[b[name]]} (v${c[s[version]]})" "=>" \
            "$(realpath ${c[b[out]]}/${c[b[name]]})"

        p: -x start using "'${c[b[name]]}'" with one of the following \
            options:'\n   ' \
            - append the following to your '~/.bash_profile': \
            "export PATH=\$PATH:$(realpath ${c[b[out]]})\n   " \
            - create a symbolic link by executing: 'sudo ln -s' \
            "$(realpath ${c[b[out]]}/${c[b[name]]})" \
            "/usr/bin/${c[b[name]]}"
    } || .die -e could not write file: "${c[b[out]]}/${c[b[name]]}"
}

p: -a -x CONFIG

exit 0
'
__MAIN__="${0##*\/}" \
/usr/bin/env bash <(base64 -d <<<"$MAIN") "$@"
exit $?
